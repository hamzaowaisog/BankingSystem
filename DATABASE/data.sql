-- MySQL Script generated by MySQL Workbench
-- Wed Dec  6 03:00:03 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema bankappdb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema bankappdb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `bankappdb` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci ;
USE `bankappdb` ;

-- -----------------------------------------------------
-- Table `bankappdb`.`users`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bankappdb`.`users` (
  `user_id` INT NOT NULL AUTO_INCREMENT,
  `username` VARCHAR(50) NOT NULL,
  `password` VARCHAR(255) NOT NULL,
  `first_name` VARCHAR(50) NULL DEFAULT NULL,
  `last_name` VARCHAR(50) NULL DEFAULT NULL,
  `date_of_birth` DATE NULL DEFAULT NULL,
  `email` VARCHAR(100) NULL DEFAULT NULL,
  `phone` VARCHAR(20) NULL DEFAULT NULL,
  `address` VARCHAR(255) NULL DEFAULT NULL,
  PRIMARY KEY (`user_id`),
  UNIQUE INDEX `username` (`username` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 15
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `bankappdb`.`accounts`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bankappdb`.`accounts` (
  `account_id` INT NOT NULL AUTO_INCREMENT,
  `user_id` INT NULL DEFAULT NULL,
  `account_type` VARCHAR(50) NOT NULL,
  `balance` DECIMAL(10,2) NULL DEFAULT '0.00',
  `open_date` DATE NULL DEFAULT NULL,
  PRIMARY KEY (`account_id`),
  INDEX `user_id` (`user_id` ASC) VISIBLE,
  CONSTRAINT `accounts_ibfk_1`
    FOREIGN KEY (`user_id`)
    REFERENCES `bankappdb`.`users` (`user_id`)
    ON DELETE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 13
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `bankappdb`.`beneficiaries`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bankappdb`.`beneficiaries` (
  `beneficiary_id` INT NOT NULL AUTO_INCREMENT,
  `user_id` INT NULL DEFAULT NULL,
  `account_id` INT NULL DEFAULT NULL,
  `recipient_name` VARCHAR(100) NOT NULL,
  `account_number` VARCHAR(50) NOT NULL,
  `bank_name` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`beneficiary_id`),
  INDEX `user_id` (`user_id` ASC) VISIBLE,
  INDEX `account_id` (`account_id` ASC) VISIBLE,
  CONSTRAINT `beneficiaries_ibfk_1`
    FOREIGN KEY (`user_id`)
    REFERENCES `bankappdb`.`users` (`user_id`)
    ON DELETE CASCADE,
  CONSTRAINT `beneficiaries_ibfk_2`
    FOREIGN KEY (`account_id`)
    REFERENCES `bankappdb`.`accounts` (`account_id`)
    ON DELETE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 39
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `bankappdb`.`billno`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bankappdb`.`billno` (
  `bill_no` INT NOT NULL AUTO_INCREMENT,
  `bill_amount` DECIMAL(10,2) NOT NULL,
  `bill_type` VARCHAR(100) NULL DEFAULT NULL,
  `due_date` DATE NULL DEFAULT NULL,
  `bill_paid` TINYINT(1) NULL DEFAULT '0',
  PRIMARY KEY (`bill_no`))
ENGINE = InnoDB
AUTO_INCREMENT = 111
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `bankappdb`.`bills`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bankappdb`.`bills` (
  `billpaid_id` INT NOT NULL AUTO_INCREMENT,
  `bill_no` INT NOT NULL,
  `account_id` INT NULL DEFAULT NULL,
  `bill_type` VARCHAR(50) NOT NULL,
  `amount_due` DECIMAL(10,2) NOT NULL,
  `due_date` DATE NULL DEFAULT NULL,
  `paid_date` DATE NULL DEFAULT NULL,
  `paid` TINYINT(1) NULL DEFAULT '0',
  PRIMARY KEY (`billpaid_id`),
  INDEX `account_id` (`account_id` ASC) VISIBLE,
  INDEX `bill_no` (`bill_no` ASC) VISIBLE,
  CONSTRAINT `bills_ibfk_1`
    FOREIGN KEY (`account_id`)
    REFERENCES `bankappdb`.`accounts` (`account_id`)
    ON DELETE CASCADE,
  CONSTRAINT `bills_ibfk_2`
    FOREIGN KEY (`bill_no`)
    REFERENCES `bankappdb`.`billno` (`bill_no`))
ENGINE = InnoDB
AUTO_INCREMENT = 14
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `bankappdb`.`loans`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bankappdb`.`loans` (
  `loan_id` INT NOT NULL AUTO_INCREMENT,
  `account_id` INT NULL DEFAULT NULL,
  `loan_type` VARCHAR(50) NOT NULL,
  `loan_amount` DECIMAL(10,2) NOT NULL,
  `paid_amount` DECIMAL(10,2) NOT NULL DEFAULT '0.00',
  `interest_amount` DECIMAL(10,2) NOT NULL DEFAULT '0.00',
  `interest_rate` DECIMAL(5,2) NOT NULL,
  `loan_term` INT NOT NULL,
  `approval_date` DATE NULL DEFAULT NULL,
  `paid_date` DATE NULL DEFAULT NULL,
  PRIMARY KEY (`loan_id`),
  INDEX `account_id` (`account_id` ASC) VISIBLE,
  CONSTRAINT `loans_ibfk_1`
    FOREIGN KEY (`account_id`)
    REFERENCES `bankappdb`.`accounts` (`account_id`)
    ON DELETE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 38
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `bankappdb`.`mobiletopups`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bankappdb`.`mobiletopups` (
  `topup_id` INT NOT NULL AUTO_INCREMENT,
  `account_id` INT NULL DEFAULT NULL,
  `mobile_number` VARCHAR(20) NOT NULL,
  `topup_amount` DECIMAL(10,2) NOT NULL,
  `topup_date` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`topup_id`),
  INDEX `account_id` (`account_id` ASC) VISIBLE,
  CONSTRAINT `mobiletopups_ibfk_1`
    FOREIGN KEY (`account_id`)
    REFERENCES `bankappdb`.`accounts` (`account_id`)
    ON DELETE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 15
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `bankappdb`.`transactions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bankappdb`.`transactions` (
  `transaction_id` INT NOT NULL AUTO_INCREMENT,
  `account_id` INT NULL DEFAULT NULL,
  `transaction_type` VARCHAR(50) NOT NULL,
  `transaction_date` DATE NULL DEFAULT NULL,
  `amount` DECIMAL(10,2) NOT NULL,
  `description` VARCHAR(255) NULL DEFAULT NULL,
  PRIMARY KEY (`transaction_id`),
  INDEX `account_id` (`account_id` ASC) VISIBLE,
  CONSTRAINT `transactions_ibfk_1`
    FOREIGN KEY (`account_id`)
    REFERENCES `bankappdb`.`accounts` (`account_id`))
ENGINE = InnoDB
AUTO_INCREMENT = 66
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

USE `bankappdb` ;

-- -----------------------------------------------------
-- procedure AddBeneficiary
-- -----------------------------------------------------

DELIMITER $$
USE `bankappdb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `AddBeneficiary`(
    IN user_id INT,
    IN accountid INT,
    IN recipient_name VARCHAR(100),
    IN acc_number VARCHAR(50),
    IN bank_name VARCHAR(100)
)
BEGIN
declare acc_no varchar(50);
	if not exists(select 1 from beneficiaries where account_number=acc_number and account_id = accountid) then
		-- Insert the beneficiary details
		INSERT INTO Beneficiaries (user_id, account_id, recipient_name, account_number, bank_name)
		VALUES (user_id, accountid, recipient_name, acc_number, bank_name);

		-- Display a message or take additional actions as needed
		SELECT 'Beneficiary added successfully' AS Message;
	else
		select 'beneficiary already exists.' as message;
	end if;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ApplyForLoan
-- -----------------------------------------------------

DELIMITER $$
USE `bankappdb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `ApplyForLoan`(
    IN accountIdParam INT,
    IN loanTypeParam VARCHAR(50),
    IN loanAmountParam DECIMAL(10, 2),
    IN interestRateParam DECIMAL(5, 2),
    IN loanTermParam INT
)
BEGIN
    DECLARE currentDate DATE;
    
    -- Get the current date
    SET currentDate = CURDATE();

    -- Insert into Loans table
    INSERT INTO Loans (account_id, loan_type, loan_amount, interest_rate, loan_term, approval_date)
    VALUES (accountIdParam, loanTypeParam, loanAmountParam, interestRateParam, loanTermParam, currentDate);

    -- Insert into Transactions table
    INSERT INTO Transactions (account_id, transaction_type, amount, description, transaction_date)
	VALUES (accountIdParam, 'debit', loanAmountParam, 'Loan', currentDate);
    
    update accounts set balance = balance+loanAmountParam where account_id = accountIdParam;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- function BeneficiaryExists
-- -----------------------------------------------------

DELIMITER $$
USE `bankappdb`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `BeneficiaryExists`(accountNumber VARCHAR(50) , accountid INT) RETURNS tinyint(1)
    DETERMINISTIC
BEGIN
    DECLARE existsCount INT;

    -- Count the number of records with the given account_number
    SELECT COUNT(*) INTO existsCount
    FROM Beneficiaries
    WHERE account_number = accountNumber and account_id = accountid;

    -- Return true if at least one record exists, otherwise return false
    RETURN existsCount > 0;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function CalculateLoanInterest
-- -----------------------------------------------------

DELIMITER $$
USE `bankappdb`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `CalculateLoanInterest`(loan_amount DECIMAL(10, 2), interest_rate DECIMAL(5, 2), loan_term INT) RETURNS decimal(10,2)
BEGIN
    DECLARE interest DECIMAL(10, 2);
    SET interest = (loan_amount * interest_rate * loan_term) / (12 * 100);
    RETURN interest;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function CheckBillNoExists
-- -----------------------------------------------------

DELIMITER $$
USE `bankappdb`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `CheckBillNoExists`(p_bill_no INT) RETURNS tinyint(1)
    DETERMINISTIC
BEGIN
    DECLARE bill_exists BOOLEAN;

    -- Check if the bill_no exists in the BILLNO table
    SELECT EXISTS(SELECT 1 FROM BILLNO WHERE bill_no = p_bill_no) INTO bill_exists;

    -- Return the result
    RETURN bill_exists;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function CheckBillPaid
-- -----------------------------------------------------

DELIMITER $$
USE `bankappdb`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `CheckBillPaid`(p_bill_id INT) RETURNS tinyint(1)
    DETERMINISTIC
BEGIN
    DECLARE is_paid BOOLEAN;

    -- Check if the bill is paid
    SELECT paid INTO is_paid FROM Bills WHERE bill_no = p_bill_id;

    -- Return the result
    RETURN is_paid;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function CheckDueDatePassed
-- -----------------------------------------------------

DELIMITER $$
USE `bankappdb`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `CheckDueDatePassed`(p_bill_id INT) RETURNS tinyint(1)
    DETERMINISTIC
BEGIN
    DECLARE is_due_date_passed BOOLEAN;

    -- Check if the due date has passed
    SELECT CASE WHEN due_date < CURRENT_DATE THEN TRUE ELSE FALSE END INTO is_due_date_passed
    FROM Bills
    WHERE bill_no = p_bill_id;

    -- Return the result
    RETURN is_due_date_passed;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function CheckLoanEligibility
-- -----------------------------------------------------

DELIMITER $$
USE `bankappdb`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `CheckLoanEligibility`(accountIdParam INT) RETURNS tinyint(1)
    DETERMINISTIC
BEGIN
    DECLARE loanExists BOOLEAN;

    -- Check if the account exists
    SELECT COUNT(*) INTO loanExists FROM Loans WHERE account_id = accountIdParam;

    IF loanExists THEN
        -- Check if the last loan's paid_date is not null
        IF (SELECT paid_date FROM Loans 
            WHERE account_id = accountIdParam 
            ORDER BY loan_id DESC 
            LIMIT 1) IS NOT NULL THEN
            RETURN TRUE; -- Last loan exists and paid
        ELSE
            RETURN FALSE;  -- Last loan exists but not paid
        END IF;
    ELSE
        RETURN TRUE;      -- Account doesn't exist, eligible for a new loan
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure DeleteBeneficiary
-- -----------------------------------------------------

DELIMITER $$
USE `bankappdb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `DeleteBeneficiary`(IN accountNumberToDelete VARCHAR(50) , IN accountid INT)
BEGIN
    -- Delete the beneficiary with the specified account_number
    delete from beneficiaries where account_number = accountNumberToDelete and account_id = accountid  LIMIT 1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function GetAccountBalance
-- -----------------------------------------------------

DELIMITER $$
USE `bankappdb`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `GetAccountBalance`(f_account_id INT) RETURNS decimal(10,2)
BEGIN
    DECLARE f_balance DECIMAL(10, 2);
    SELECT balance INTO f_balance FROM Accounts WHERE Accounts.account_id = f_account_id;
    RETURN f_balance;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function GetBillAmount
-- -----------------------------------------------------

DELIMITER $$
USE `bankappdb`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `GetBillAmount`(p_bill_no INT) RETURNS decimal(10,2)
    DETERMINISTIC
BEGIN
    DECLARE p_bill_amount DECIMAL(10, 2);

    -- Retrieve the bill amount for the given bill_id
    SELECT bill_amount INTO p_bill_amount FROM billno WHERE bill_no = p_bill_no;

    -- Return the bill amount
    RETURN p_bill_amount;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function ISEmail
-- -----------------------------------------------------

DELIMITER $$
USE `bankappdb`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `ISEmail`(p_email VARCHAR(150)) RETURNS tinyint(1)
    DETERMINISTIC
BEGIN
    DECLARE countuser INT;
    SELECT count(*) INTO countuser FROM USERS WHERE email = p_email;
    RETURN countuser > 0;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function ISUSEREXIST
-- -----------------------------------------------------

DELIMITER $$
USE `bankappdb`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `ISUSEREXIST`(P_USERNAME VARCHAR(150)) RETURNS tinyint(1)
    DETERMINISTIC
BEGIN
    DECLARE countuser INT;
    SELECT count(*) INTO countuser FROM USERS WHERE USERNAME = P_USERNAME;
    RETURN countuser > 0;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure InsertTransaction
-- -----------------------------------------------------

DELIMITER $$
USE `bankappdb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `InsertTransaction`(
    IN p_account_id INT,
    IN p_transaction_type VARCHAR(10),
    IN p_amount DECIMAL(10, 2),
    IN p_description VARCHAR(255)
)
BEGIN
    INSERT INTO Transactions (account_id, transaction_type, amount, description, transaction_date)
    VALUES (p_account_id, p_transaction_type, p_amount, p_description, curdate());
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure MobileTopUp
-- -----------------------------------------------------

DELIMITER $$
USE `bankappdb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `MobileTopUp`(
    IN account_id INT,
    IN mobile_number VARCHAR(20),
    IN topup_amount DECIMAL(10, 2)
)
BEGIN
    -- Insert the mobile top-up details
    INSERT INTO MobileTopUps (account_id, mobile_number, topup_amount,topup_date)
    VALUES (account_id, mobile_number, topup_amount,curdate());

    -- Display a message or take additional actions as needed
    SELECT 'Mobile top-up successful' AS Message;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure PayBillByBillNo
-- -----------------------------------------------------

DELIMITER $$
USE `bankappdb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `PayBillByBillNo`(
    IN p_bill_no INT,
    IN p_account_id INT,
    IN amount DECIMAL(10,2)
)
BEGIN
	DECLARE p_DUE_DATE DATE;
    DECLARE p_bill_amount DECIMAL(10, 2);
    DECLARE p_bill_type VARCHAR(100);

    -- Retrieve bill information from BILLNO table
    SELECT bill_amount, bill_type,due_date
    INTO p_bill_amount, p_bill_type,p_DUE_DATE
    FROM BILLNO
    WHERE bill_no = p_bill_no;

    -- Update bill_paid status in BILLNO table
    UPDATE BILLNO SET bill_paid = TRUE WHERE bill_no = p_bill_no;

    -- Insert data into Bills table
    INSERT INTO Bills (bill_no, account_id, bill_type, amount_due, due_date,paid_date, paid)
    VALUES (p_bill_no, p_account_id, p_bill_type, p_bill_amount, P_DUE_DATE,CURDATE(), TRUE);

    -- Insert data into transactions table
    INSERT INTO transactions (account_id, transaction_type, amount, transaction_date,description)
    VALUES (p_account_id, 'credit', p_bill_amount, curdate() ,CONCAT('Bill payment for bill_no: ', p_bill_no));

    -- Display a message or take additional actions as needed
    SELECT 'Bill paid successfully' AS Message;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure TransferMoney
-- -----------------------------------------------------

DELIMITER $$
USE `bankappdb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `TransferMoney`(
    IN from_account_id INT,
    IN to_account_id INT,
    IN transfer_amount DECIMAL(10, 2)
)
BEGIN
    -- Start a transaction
    START TRANSACTION;

    -- credit from the source account
    INSERT INTO Transactions (account_id, transaction_type, amount, description,transaction_date)
    VALUES (from_account_id, 'credit', transfer_amount, CONCAT('Transfer to Account #', to_account_id),curdate());

    -- debit to the destination account
    INSERT INTO Transactions (account_id, transaction_type, amount, description,transaction_date)
    VALUES (to_account_id, 'debit', transfer_amount, CONCAT('Transfer from Account #', from_account_id),curdate());

    -- Commit the transaction if everything is successful
    COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure cr_account
-- -----------------------------------------------------

DELIMITER $$
USE `bankappdb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `cr_account`(
	in user_id int,
    in acc_type varchar(100),
    in n_balance Decimal(10,2)
    )
Begin
    insert into accounts (user_id,account_type,balance,open_date) values (user_id,acc_type,n_balance,Curdate());
    end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure cr_user
-- -----------------------------------------------------

DELIMITER $$
USE `bankappdb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `cr_user`(
in n_username varchar(100),
in n_password varchar(100),
in n_firstname varchar(100),
in n_lastname varchar(100),
in n_date DATE,
in n_email varchar(100),
in n_phone varchar(100),
in n_address varchar(100))
begin

insert into users (username,password,first_name,last_name,date_of_birth,email,phone,address) values (n_username,n_password,n_firstname,n_lastname,n_date,n_email,n_phone,n_address);

end$$

DELIMITER ;
USE `bankappdb`;

DELIMITER $$
USE `bankappdb`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `bankappdb`.`before_insert_loan`
BEFORE INSERT ON `bankappdb`.`loans`
FOR EACH ROW
BEGIN
    -- Calculate interest_amount using the CalculateLoanInterest function
    SET NEW.interest_amount = CalculateLoanInterest(NEW.loan_amount, NEW.interest_rate, NEW.loan_term);
END$$

USE `bankappdb`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `bankappdb`.`update_transaction_on_topup`
AFTER INSERT ON `bankappdb`.`mobiletopups`
FOR EACH ROW
BEGIN
   insert into bankappdb.transactions(account_id,description,transaction_type,amount,transaction_date) values(new.account_id,Concat('mobile top up to ',new.mobile_number),'credit',new.topup_amount,curdate());

END$$

USE `bankappdb`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `bankappdb`.`update_account_balance`
AFTER INSERT ON `bankappdb`.`transactions`
FOR EACH ROW
BEGIN
    DECLARE current_balance DECIMAL(10, 2);
    DECLARE remaining_loan_balance DECIMAL(10, 2);
    DECLARE excess_amount DECIMAL(10, 2);

    -- Check if the transaction is a debit or credit
    IF NEW.transaction_type = 'credit' THEN
        -- Check for sufficient funds before debit transaction
        SELECT balance INTO current_balance FROM Accounts WHERE account_id = NEW.account_id;
        IF current_balance < NEW.amount THEN
            -- Signal an exception if there are insufficient funds
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Insufficient funds for the transaction';
        ELSE
            -- Update account balance for successful debit transaction
            UPDATE Accounts SET balance = balance - NEW.amount WHERE account_id = NEW.account_id;
        END IF;
    ELSEIF NEW.transaction_type = 'debit' THEN
        IF NEW.description not LIKE '%Loan%' THEN
            -- Update account balance for a debit transaction not related to a loan
            UPDATE Accounts SET balance = balance + NEW.amount WHERE account_id = NEW.account_id;
        END IF;
    END IF;
END$$

USE `bankappdb`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `bankappdb`.`update_loan_status`
AFTER INSERT ON `bankappdb`.`transactions`
FOR EACH ROW
BEGIN 
    DECLARE remaining_loan_balance DECIMAL(10, 2);
    DECLARE excess_amount DECIMAL(10,2);
    -- Check if the transaction is related to a loan payment
    IF NEW.transaction_type = 'debit' AND LOWER(NEW.description) LIKE '%loanpayment%' THEN
        -- Calculate the remaining loan balance after a credit transaction
        SELECT ((loan_amount+interest_amount) - (NEW.amount+paid_amount)) INTO remaining_loan_balance
        FROM Loans
        WHERE account_id = NEW.account_id and paid_date is null;
        -- Check if the remaining loan balance is zero or less
        IF remaining_loan_balance <= 0 THEN
            UPDATE Loans SET paid_date = CURDATE(), paid_amount = loan_amount+interest_amount  WHERE account_id = NEW.account_id and paid_date is null;
            SET excess_amount = ABS(remaining_loan_balance);
            UPDATE Accounts SET balance = balance - remaining_loan_balance WHERE account_id = NEW.account_id;
        ELSE
            -- Update the loan amount if the loan is partially paid
            UPDATE Loans SET paid_amount = paid_amount+new.amount WHERE account_id = NEW.account_id;
        END IF;
    END IF;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
